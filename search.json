[
  {
    "objectID": "posts/making-websites/index.html",
    "href": "posts/making-websites/index.html",
    "title": "Making websites",
    "section": "",
    "text": "Quarto is a open-source scientific and technical publishing system that allows us to create a variety of different outputs. This includes outputs such as PDF, Word files, or HTML documents. But in addition, Quarto has a inbuilt static site generator, with great integration with R and Python code."
  },
  {
    "objectID": "posts/making-websites/index.html#creating-a-quarto-blog",
    "href": "posts/making-websites/index.html#creating-a-quarto-blog",
    "title": "Making websites",
    "section": "Creating a Quarto blog",
    "text": "Creating a Quarto blog\nA quarto blog can be created in one single workflow. To create a new quarto blog select File -> New Project -> Quarto blog, decide on a name and select a folder where to store it, and press Create Project.\n\n\n\nCreate a blog post\n\n\n\nQuarto files\nAfter having created a Quarto blog, your RStudio will open a session that is populated with a variety of files and folders. Some of these files contain settings related to the blog, while other contains data. The files most important include:\n\n_quarto.yml - Defines how the blog will be rendered.\nindex.qmd - Defines the content of your blog landing page.\nstyles.css - Defines the theme.\n\nYou might also notice a folder called posts/. As the name implies, this folder will contain our blog posts."
  },
  {
    "objectID": "posts/making-websites/index.html#create-landing-page",
    "href": "posts/making-websites/index.html#create-landing-page",
    "title": "Making websites",
    "section": "Create landing page",
    "text": "Create landing page\nOne of the first things we want to do is edit our blog landing page. For this example, we only want to change the title. The title can be changed by altering the title in index.qmd.\n---\ntitle: \"My blog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---"
  },
  {
    "objectID": "posts/making-websites/index.html#define-blog-settings",
    "href": "posts/making-websites/index.html#define-blog-settings",
    "title": "Making websites",
    "section": "Define blog settings",
    "text": "Define blog settings\nIn addition to editing the landing page, we can should also define blog specific settings. These settings are all defined inside the _quarto.yml file. Lets change the website title and add a link to our GitHub repository to the navigation bar by changing the _quarto.yml file to the following.\nproject:\n  type: website\n\nwebsite:\n  title: \"My blog\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/rostools/coding-club\nformat:\n  html:\n    theme: cosmo\n    css: styles.css"
  },
  {
    "objectID": "posts/making-websites/index.html#create-a-blog-post",
    "href": "posts/making-websites/index.html#create-a-blog-post",
    "title": "Making websites",
    "section": "Create a blog post",
    "text": "Create a blog post\nTo create a blog post, we need to go into the posts/ folder. From here we can see that there already exists two example blog posts, “welcome” and “post-with-code”. Lets delete those and create our own post.\nAfter deleting the example blog posts, create a new folder called \"first-blog-post\". Inside this folder create a .qmd file called index.qmd. Your folders should look like this:\n\n\n\n\n\n\nPosts folder\n\n\n\n\n\n\n\n\n\nFirst-blog-post folder\n\n\n\n\n\nNow, we can open the index.qmd file and start writing our first blog post.\nAt the very top, we need to define some post metadata in the form of YAML. We want to define a title, description, author, date, and categories. Lets add the following to our index.qmd.\n---\ntitle: \"My first blog post\"\ndescription: \"My first blog post using Quarto\"\nauthor: \"Anders Askeland\"\ndate: last-modified\ncategories: \n  - blog\n  - first\n---\nNow we need to write our actual text body. To write our text body, we will write using Markdown, a simple and easy to use markup language.\nLets add the following text body.\n---\ntitle: \"My first blog post\"\ndescription: \"My first blog post using Quarto\"\nauthor: \"Anders Askeland\"\ndate: last-modified\ncategories: \n  - blog\n  - first\n---\n\n# My first blog post\n\nThis is my first blog post.\n\nRender the blog\nUp until now, we have only been working in files and folders. But, how do we actually create a blog? This is where Quarto as a static site generate comes in, where we can use Quarto to automatically render us a blog website.\nTo render our blog into a website we can press the render button at the top of any index.qmd file in the main blog directory.\n\n\n\nRender blog post\n\n\nWhen having render the blog, the landing page should look like this:\n\n\n\nLanding page to website\n\n\nWhen viewing our blog post we should see:\n\n\n\nBlog post on website"
  },
  {
    "objectID": "posts/making-websites/index.html#host-your-blog",
    "href": "posts/making-websites/index.html#host-your-blog",
    "title": "Making websites",
    "section": "Host your blog",
    "text": "Host your blog\nWhile we now have successfully created a blog, it is currently only stores locally on our own computer. It is not accessible from the internet.\nThere are a multitude of methods to host our blog. We will show you how to use GitHub (GitHub account required) to host a website in our next session."
  },
  {
    "objectID": "posts/branches-and-actions/index.html",
    "href": "posts/branches-and-actions/index.html",
    "title": "Making Branches and Adding Actions",
    "section": "",
    "text": "In this post we will learn all about GitHub flow, making branches, and adding GitHub Actions.\nIn today’s tutorial, we will create a new branch for the coding-club website. We will create a blog entry post in this branch and demonstrate how to merge it with the main branch using a pull request to ensure that our blog post appears on the website.\nBut first, let’s define some concepts!"
  },
  {
    "objectID": "posts/branches-and-actions/index.html#defining-basic-concepts",
    "href": "posts/branches-and-actions/index.html#defining-basic-concepts",
    "title": "Making Branches and Adding Actions",
    "section": "2 Defining Basic Concepts",
    "text": "2 Defining Basic Concepts\n\n2.1 Branches\nA branch is a parallel version of a repository.\nIt is contained within the repository, but does not affect the primary or main branch allowing you to work freely without disrupting the “primary” version. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. When you’ve made changes you want to make, you can merge your branch back into the main branch (using pull request) to publish your changes and make it available for other users.\nThis feature can be especially useful in collaborative projects. For example, imagine you’re working on a project with a team, and you want to add a new feature to the code. Instead of making changes directly to the primary version, you can create a new branch and make changes there. This means you can experiment and work on the feature without affecting the primary version. Branching also allows one or more people to work on different parts of the code at the same time without interfering with each others work or without creating conflicting files.\nIn Git, branching is considered a lightweight process, meaning it’s quick and easy to create a new branch and switch between branches.\n\n\n2.2 Pull request\nPull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository’s owner/collaborators.\n\n\n2.3 GitHub Action\nA GitHub Action is a clean environment that is located in a server and can run code from beginning to end. GitHub Actions is a platform that allows you to automate the build, test, and deployment pipeline. It allows you to also run any arbitrary code on your repository when a specific event happens on a GitHub repository. A GitHub Action can be breakdown into several components:\n\nEvents: An event is anything that can happen on a GitHub repository. An event can be anything from pushing a code, creating a branch or building a complete website.\nWorkflow: A workflow is an automated process composed of a series of jobs that gets executed when it’s triggered by an event. Workflows are defined in YAML files and are stored in the .github/workflows directory at the root of the repository.\nJobs: A job is a series of tasks that gets executed in a workflow upon being triggered by an event.\nRunners: Runners are processes on a server that run the workflow when it’s triggered.\nActions: Actions are individual tasks that are called inside a job. Actions are used to perform complex tasks that you may call multiple times and import into your workflows.\n\nFor more information regarding GitHub Actions please visit: GitHub Actions\n\n\n2.4 GitHub Flow\nGitHub Flow is a branch-based workflow that is useful for collaborating in projects. GitHub Flow usually involves the following steps:\n\nCreating a new branch\nMaking changes and adding the commits\nCreating a pull request\nReviewing changes and accepting them\nMerging your pull request\nDeleting your branch\n\nFor more information regarding GitHub Flow please visit: GitHub Flow\n\n\n\nFigure 1: GitHub Flow."
  },
  {
    "objectID": "posts/branches-and-actions/index.html#prerequisites",
    "href": "posts/branches-and-actions/index.html#prerequisites",
    "title": "Making Branches and Adding Actions",
    "section": "3 Prerequisites",
    "text": "3 Prerequisites\n\n3.1 usethis setup\nusethis is an R package that offers support for package development and GitHub workflows. It automates repetitive tasks that arise during a project setup and development. You can install it by typing install.packages(\"usethis\") in your RStudio Console.\nThe usethis package will be especially helpful for its pull request helpers that will be shown in more detail down below.\nFor more information regarding these package please visit: usethis\n\n\n3.2 Create a temporary token\nA GitHub personal access token (PAT) is required to use usethis functions that create something in GitHub, such as a pull request. To get a personal access token type the following into your console:\nusethis::create_github_token()\nIf you’re signed into GitHub, usethis::create_github_token takes you to a pre-filled form to make a new PAT. Once there, describe the token’s purpose in the Note field, and change the expiration day to 90 days. Afterwards click Generate token at the bottom of the page. Note that you can also generate a temporary token directly in the GitHub page: GitHub Tokens\n\n\n\nFigure 2: Generating a temporary token.\n\n\nOnce the token is generated, you will get a long string of characters (green section) as you can observe in Figure 3. Copy this token into your clipboard.\n\n\n\nFigure 3: Copying the temporary token.\n\n\nGo back to RStudio and type the following in the Console:\ngitcreds::gitcreds_set()\nThis will prompt you to enter your token, so just paste it!\nNote: If you already have a stored credential, gitcreds::gitcreds_set() reveals this and will even let you inspect it. This helps you decide whether to keep the existing credential or replace it. In my case I choose the option that said “Replace this credentials.”"
  },
  {
    "objectID": "posts/branches-and-actions/index.html#forking-and-cloning",
    "href": "posts/branches-and-actions/index.html#forking-and-cloning",
    "title": "Making Branches and Adding Actions",
    "section": "4 Forking and cloning",
    "text": "4 Forking and cloning\nA fork can be defined as a personal copy of a repository in GitHub owned by a different user.\nA clone is defined as a local version of a repository, including commits and branches. A clone is basically a copy of a repository that lives on your computer instead of on a website’s server somewhere. When you make a clone, you can edit the files and use Git to keep track of your changes without having to be online. The repository you cloned is still connected to the remote version so that you can push your local changes to the remote to keep them synced when you’re online.\nThen, first step is to fork the source repository (in this case the website repository), to get our own copy on GitHub, and then clone that, to get our own local copy. To do this type the following in the R Studio console:\nusethis::create_from_github(\"rostools/coding-club\", fork = true)\nWhat this does is that:\n\nIt forks the coding-club repository owned by rostools (Luke) into your own GitHub account.\nClones the coding-club repository into a folder named “coding-club” in your Desktop\nThe origin remote is set to my coding-club repository (personal copy).\nOpens a new instance of RStudio in the coding-club project, if you’re working in RStudio. Otherwise, switches your current R session to that project.\n\nDoes additional Git setup:\n\nThe upstream remote is set to the coding-club repository owned by rostools (the original one).\nThe master or main branch is set to track upstream/master or upstream/main, so you can pull upstream changes in the future.\n\nIn case the line above gives you an error, you can go to the following link where the cloning repository is located. In this case it was: https://github.com/ceciliamescobedo/coding-club. In the page:\n\nClick the code button and copy paste the URL link under the HTTPS tab. See Figure 4.\nGo back to R Studio. Click “File -> New project -> Version control -> Git -> Paste the URL -> Create new project”.\nIn the Console type gert::gert_remote_add (\"https://github.com/rostools/coding-club.git\", \"upstream\"). This will set the rostools/coding-club (orginal repo) as the upstream.\n\n\n\n\nFigure 4: Cloning directly from GitHub"
  },
  {
    "objectID": "posts/branches-and-actions/index.html#creating-a-new-branch-and-making-changes.",
    "href": "posts/branches-and-actions/index.html#creating-a-new-branch-and-making-changes.",
    "title": "Making Branches and Adding Actions",
    "section": "5 Creating a new branch and making changes.",
    "text": "5 Creating a new branch and making changes.\npr_init()creates a branch in our repository. Go to your R Console and type:\nusethis::pr_init(\"add-action\")\nThis will create a branch called add-action and we switch to it.\nNow we will be able to work locally, making changes to files and committing them to Git. We will use this branch to create a GitHub Action that will build up our coding-club website.\nIf you want to see the list of branches, go back to your R console and type:\ngert::git_branch_list()\nAfter hitting enter you will be able to see the list of branches as shown in Figure 5.\nThe important branches are the ones that does not include origin or upstream in their name. In this case we have two branches that meet those requirements -> main which was the original branch and add-action which is the branch we created.\n\n\n\nFigure 5: List of branches"
  },
  {
    "objectID": "posts/branches-and-actions/index.html#using-github-actions",
    "href": "posts/branches-and-actions/index.html#using-github-actions",
    "title": "Making Branches and Adding Actions",
    "section": "6 Using GitHub Actions",
    "text": "6 Using GitHub Actions\nSo now, let’s go ahead set up the infrastructure to create a website using GitHub Actions.\nThere are several Actions that you can directly copy-paste from Google.\nIn our case we searched for “quarto dev actions.”\nClick on the first link (https://github.com/quarto-dev/quarto-actions) and go inside the folder named “examples.” Inside that folder open the .yml file named quarto-publish-example.yml. Click on the raw button and copy the URL on your clipboard (see Figure 6)\n\n\n\nFigure 6: Copying an action using raw button\n\n\nGo back to RStudio. Use the usethis::use_github_action() and paste the URL.\nusethis::use_github_action(\"build-website\", url = \"https://raw.githubusercontent.com/quarto-dev/quarto-actions/main/examples/quarto-publish-example.yml\")\nThis line of code will create a new folder called .github, that can be access through the file pane in Rstudio.\n\nOpen the .github this folder. Go to the workflow folder and open the quarto-render-publish.yml file.\nIn the section named Set up Quarto change to tinytex: false\nUn-comment the section that is named Publish to GitHub Pages (and render) and delete the sections named Publish to Netlify and Publish to RStudio Connect (lines 22-38)\nClick Save\nGo to the Git pane (Ctrl-Alt-M), stage everything in the Git folder and commit changes.\n\nThis steps will generate the website, push it to GitHub and build the website in GitHub."
  },
  {
    "objectID": "posts/branches-and-actions/index.html#creating-a-pull-request",
    "href": "posts/branches-and-actions/index.html#creating-a-pull-request",
    "title": "Making Branches and Adding Actions",
    "section": "7 Creating a pull request",
    "text": "7 Creating a pull request\nSince we are done with the changes we wanted to make in our branch, we are ready to push our branch called add-action\nusethis::pr_push()\nNote: Select the ‘origin’ option when the line prompts it.\npr_push() pushes the local changes we have made (specifically the branch add-action) to your copy of coding-club on GitHub (origin remote) and puts you in position to make your pull request.\nThis launches a browser window with the GitHub page, which looks like Figure 7.\n\nClick the create pull request button\n\nNotice that in Figure 7 at top it says rostools/coding-club not Cecilia/coding-club.\n\n\n\nFigure 7: Creating a pull request\n\n\n\n7.1 Review of pull request, merge and finish.\nThe owner of the repository will accept the changes. This will merge it into the coding-club repository and we can start generating the website through that.\n\n\n\nFigure 8: Merging a branch\n\n\nOnce this is done we can use usethis::pr_pause(). This switches you from the branch called add-action to the branch called main."
  },
  {
    "objectID": "posts/branches-and-actions/index.html#practice-using-the-github-workflow-to-create-a-blog-post-in-the-website",
    "href": "posts/branches-and-actions/index.html#practice-using-the-github-workflow-to-create-a-blog-post-in-the-website",
    "title": "Making Branches and Adding Actions",
    "section": "8 Practice: Using the GitHub workflow to create a blog post in the website",
    "text": "8 Practice: Using the GitHub workflow to create a blog post in the website\nIn summary the GitHub Flow involves the following:\n\nCreating a branch\nMaking changes\nCreating a pull request\nReviewing pull request\nMerging and finish\n\nSo now let’s go ahead and create a blog post using this steps.\n\nCreate a new branch using usethis::pr_init(\"post-branches)\nIn this case the change will be creating a blog post.\n\nGo to “File -> New File-> Quarto Document”.\nSave this file in a new location. For this got to “File -> Save as -> coding-club -> posts -> Create new folder -> Call it branches-actions”.\nOpen the Quarto Document and saved it as index.qmd. Important: for all blog posts, the Quarto document should always be named index.qmd and the folder where it is stored should be the post title.\nCopy the YAML from an old blog post and modify the post.\nGo to the Git pane and commit changes.\n\nCreate a pull request.\n\nGo to you console and type usethis::pr_push() and select option 1 to push to the origin remote.\nClick the pull request button on the GitHub window that opened.\n\nWait for the pull request to be reviewed.\nMerging will occur if changes are accepted. To finish with the pull request, type usethis::pr_finish(). This line of code will close your branch. Note in case you want to resume your branch you can type usethis::pr_resume() instead."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Coding Club",
    "section": "",
    "text": "Making websites\n\n\n\n\n\n\n\nquarto\n\n\nwebsites\n\n\n\n\nHow to make a simple Quarto website\n\n\n\n\n\n\nMar 23, 2023\n\n\nAnders Askeland\n\n\n\n\n\n\n  \n\n\n\n\nMaking Branches and Adding Actions\n\n\n\n\n\n\n\nquarto\n\n\nwebsites\n\n\nactions\n\n\nbranches\n\n\n\n\nLearning the GitHubflow, making branches and adding actions\n\n\n\n\n\n\nMar 23, 2023\n\n\nCecilia Martinez Escobedo\n\n\n\n\n\n\nNo matching items"
  }
]